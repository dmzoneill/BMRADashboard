; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Bare Metal Release Architecture Dashboard"
#define MyAppVersion "1.0"
#define MyAppPublisher "Intel"
#define MyAppURL "http://www.intel.com/"
#define MyAppExeName "BMRA-Launch.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{6C1797DB-81FE-4503-A8CF-A1D6FF4213D5}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=eula.txt
OutputBaseFilename=BMRA-Dashboard-Setup
SetupIconFile=intel.ico
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "BMRA-Launch.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Launch.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\README.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Dashboard\*"; DestDir: "{app}\Dashboard"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "fonts\INTELCLEAR_BD.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear Bold"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\INTELCLEAR_BDIT.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear Bold Italic"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\INTELCLEAR_IT.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear Italic"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\INTELCLEAR_LT.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear Light"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\INTELCLEAR_LTIT.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear Light Italic"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\INTELCLEAR_RG.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\INTELCLEARPRO_BD.TTF"; DestDir: "{fonts}"; FontInstall: "Intel Clear Pro Bold"; Flags: onlyifdoesntexist uninsneveruninstall
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: shellexec postinstall skipifsilent

[Code]
type
  { the following mapping of the DWORDLONG data type is wrong; }
  { the correct type is a 64-bit unsigned integer which is not }
  { available in InnoSetup Pascal Script at this time, so max. }
  { values of the following fields will be limited to quite a }
  { big reserve of 8589,934.592 GB of RAM; I hope enough for }
  { the next versions of Windows :-) }
  DWORDLONG = Int64;
  TMemoryStatusEx = record
    dwLength: DWORD;
    dwMemoryLoad: DWORD;
    ullTotalPhys: DWORDLONG;
    ullAvailPhys: DWORDLONG;
    ullTotalPageFile: DWORDLONG;
    ullAvailPageFile: DWORDLONG;
    ullTotalVirtual: DWORDLONG;
    ullAvailVirtual: DWORDLONG;
    ullAvailExtendedVirtual: DWORDLONG;
  end;

function GlobalMemoryStatusEx(var lpBuffer: TMemoryStatusEx): BOOL;
  external 'GlobalMemoryStatusEx@kernel32.dll stdcall';

function WbemQuery(WbemServices: Variant; Query: string): Variant;
  var
    WbemObjectSet: Variant;
  begin
    Result := Null;
    WbemObjectSet := WbemServices.ExecQuery(Query);
    if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
    begin
      Result := WbemObjectSet.ItemIndex(0);
    end;
  end;

function InitializeSetup(): Boolean;
  var
   ErrorCode: Integer;
   JavaInstalled : Boolean;
   ResultMsg : Boolean;
   Versions: TArrayOfString;
   I: Integer;
   MemoryStatus: TMemoryStatusEx;
  begin      
    Result := True;
    MemoryStatus.dwLength := SizeOf(MemoryStatus);
    if GlobalMemoryStatusEx(MemoryStatus) then
    begin   
      if MemoryStatus.ullTotalPhys < 6442450944 then
      begin
        if MsgBox('You have less than 6GB of physical memory available. Are you sure you want to continue with the installation ?', mbConfirmation, MB_YESNO) = IDNO
        then
          Result := False;
      end;
    end;
    
    if (RegGetSubkeyNames(HKLM64, 'SOFTWARE\JavaSoft\Java Runtime Environment', Versions)) or (RegGetSubkeyNames(HKLM64, 'SOFTWARE\JavaSoft\Java Development Kit', Versions)) then
    begin
      for I := 0 to GetArrayLength(Versions)-1 do
        if JavaInstalled = true then
        begin
          //do nothing
        end else
        begin
          if ( Versions[I][2]='.' ) and ( ( StrToInt(Versions[I][1]) > 1 ) or ( ( StrToInt(Versions[I][1]) = 1 ) and ( StrToInt(Versions[I][3]) >= 8 ) ) ) then
          begin
            JavaInstalled := true;
          end else
          begin
            JavaInstalled := false;
          end;
      end;
    end else
    begin
      JavaInstalled := false;
    end;

    if JavaInstalled then
    begin
      Result := true;
    end else
    begin
      ResultMsg := MsgBox('Oracle Java v1.8 64Bit or newer not found in the system. ' + #13#10 + 
	                      'Java 1.8 64Bit or later is required to run this application. ' + #13#10 + #13#10 + 
						  'If you have installed Java and are seeing this prompt, you most likely installed 32bit Java ' + #13#10 + #13#10 + 
						  'Do you want to continue?',
      mbConfirmation, MB_YESNO) = idYes;
      if ResultMsg = false then
      begin
        Result := false;
      end else
      begin
        Result := true;
        ShellExec('open', 'http://www.java.com/getjava','','',SW_SHOWNORMAL,ewNoWait,ErrorCode);
      end;
    end;
  end;

end.